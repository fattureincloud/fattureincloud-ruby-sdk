=begin
#Fatture in Cloud API v2 - API Reference

#Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.

The version of the OpenAPI document: 2.0.7
Contact: info@fattureincloud.it
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.3.0

=end

require 'spec_helper'
require 'json'

# Unit tests for FattureInCloud_Ruby_Sdk::ReceiptsApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'ReceiptsApi' do
  before do
    # run before each test
    @api_instance = FattureInCloud_Ruby_Sdk::ReceiptsApi.new

    @create_receipt_response_obj = { "data": { "id": 12346, "date": "2021-08-19", "number": 6, "numeration": "REC006", "amount_net": 8.2, "amount_vat": 1.8, "amount_gross": 10, "use_gross_prices": true, "type": "sales_receipt", "description": "cassa 1", "rc_center": "", "created_at": "2021-08-19 17:57:56", "updated_at": "2021-08-19 17:57:56", "payment_account": { "id": 555, "name": "contanti" }, "items_list": [{ "id": 888, "amount_net": 8.2, "amount_vat": 1.8, "amount_gross": 10, "category": "altro", "vat": { "id": 0, "value": 22, "description": "iva" } }] } }
    allow(@api_instance).to receive(:create_receipt) { @create_receipt_response_obj }

    @get_receipt_response_obj = { "data": { "id": 12346, "date": "2021-08-19", "number": 6, "numeration": "REC006", "amount_net": 8.2, "amount_vat": 1.8, "amount_gross": 10, "use_gross_prices": true, "type": "sales_receipt", "description": "cassa 1", "rc_center": "", "created_at": "2021-08-19 17:57:56", "updated_at": "2021-08-19 17:57:56", "payment_account": { "id": 555, "name": "contanti" }, "items_list": [{ "id": 888, "amount_net": 8.2, "amount_vat": 1.8, "amount_gross": 10, "category": "altro", "vat": { "id": 0, "value": 22, "description": "iva" } }] } }
    allow(@api_instance).to receive(:get_receipt) { @get_receipt_response_obj }

    @get_receipt_pre_create_info_response_obj = { "data": { "numerations": { "2016": { "sales_receipt": { "REC003": 12, "REC002": 5, "REC001": 2 }, "till_receipt": { "REC002": 6, "REC001": 2 } }, "2017": { "sales_receipt": { "REC003": 14, "REC002": 7, "REC001": 1 }, "till_receipt": { "REC003": 1, "REC001": 3 } }, "2018": { "sales_receipt": { "REC001": 3 } }, "2019": { "sales_receipt": { "REC002": 105, "REC001": 22 }, "till_receipt": { "REC003": 21, "REC002": 24, "REC001": 25 } }, "2020": { "sales_receipt": { "REC001": 3 } }, "2021": { "sales_receipt": { "REC005": 3, "REC004": 2, "REC003": 2, "REC001": 7 } } }, "numerations_list": ["REC001", "REC002", "REC003", "REC005", "REC006"], "rc_centers_list": ["Sede generale", "Negozio Bergamo", "Negozio Milano"], "payment_accounts_list": [{ "id": 111, "name": "Indesa - carta conto" }, { "id": 222, "name": "Contanti" }, { "id": 333, "name": "Bonifico Bancario" }], "categories_list": ["altro", "arredamento"], "vat_types_list": [{ "id": 1334, "value": 0, "description": "Non imp. art. 17 c. 6 DPR 633\/72 e s.m.i.", "is_disabled": false }, { "id": 1333, "value": 0, "description": "Non sogg. art. 74 c. 7 e 8 DPR 633\/72", "is_disabled": false }, { "id": 1332, "value": 0, "description": "Non imp. art. 17 c. 6 lett. A TER DPR 633\/72", "is_disabled": false }, { "id": 1331, "value": 22, "description": "Pippus", "is_disabled": false }, { "id": 1330, "value": 0, "description": "Natura 4", "is_disabled": false }, { "id": 1020, "value": 0, "description": "PA Non imp art. 2", "is_disabled": false }, { "id": 1018, "value": 0, "description": "Aliq. 22% reverse charge", "is_disabled": false }, { "id": 1015, "value": 22, "description": "Speciale prova", "is_disabled": false }, { "id": 1014, "value": 0, "description": "Ai sensi dellarticolo 123", "is_disabled": false }, { "id": 1013, "value": 0, "description": "Non imponibile art. 8 lett. A DPR 633\/72", "is_disabled": false }, { "id": 1010, "value": 0, "description": "NON IMPONIBILE IVA EX ART. 8 COMMA 1 LETT.A", "is_disabled": false }, { "id": 1009, "value": 20, "description": "Aliquota 20%", "is_disabled": false }, { "id": 1008, "value": 0, "description": "Non imp. art. 41 D.L. 427\/93", "is_disabled": false }, { "id": 1007, "value": 0, "description": "Non imp. art. 71 DPR 633\/72", "is_disabled": false }, { "id": 1006, "value": 0, "description": "Escl. art. 15 DPR 633\/72", "is_disabled": false }, { "id": 1004, "value": 0, "description": "Non imp. art. 1 L. 244\/2007", "is_disabled": false }, { "id": 1003, "value": 0, "description": "Non imp. art. 8 DPR 633\/72", "is_disabled": false }, { "id": 1002, "value": 0, "description": "Omaggi art. 2 c. 2 n. 4 DPR 633\/72", "is_disabled": false }, { "id": 1000, "value": 0, "description": "art.26 COMMA\' 3 DPR 633\/72", "is_disabled": false }] } }
    allow(@api_instance).to receive(:get_receipt_pre_create_info) { @get_receipt_pre_create_info_response_obj }

    @get_receipts_monthly_totals_response_obj = { "data": [{ "net": 15000, "gross": 18000, "count": 10 }, { "net": 18000, "gross": 22000, "count": 20 }, { "net": 20000, "gross": 24400, "count": 30 }, { "net": 19000, "gross": 22000, "count": 20 }, { "net": 17000, "gross": 20000, "count": 10 }, { "net": 18000, "gross": 24000, "count": 21 }, { "net": 22000, "gross": 25000, "count": 30 }, { "net": 17000, "gross": 21000, "count": 21 }, { "net": 0, "gross": 0, "count": 10 }, { "net": 0, "gross": 0, "count": 20 }, { "net": 0, "gross": 0, "count": 30 }, { "net": 0, "gross": 0, "count": 21 }] }
    allow(@api_instance).to receive(:get_receipts_monthly_totals) { @get_receipts_monthly_totals_response_obj }

    @list_receipts_response_obj = { "current_page": 1, "data": [{ "id": 12345, "date": "2021-08-20", "number": 5, "numeration": "REC005", "amount_net": 16.39, "amount_vat": 3.61, "amount_gross": 20, "use_gross_prices": true, "type": "sales_receipt", "description": "cassa 1", "rc_center": "", "created_at": "2021-08-20 13:56:56", "updated_at": "2021-08-20 13:56:56", "payment_account": { "id": 222, "name": "carta di credito" }, "items_list": [{ "id": 666, "amount_net": 10, "amount_vat": 2.2, "amount_gross": 12.2, "category": "altro", "vat": { "id": 0, "value": 22, "description": "iva" } }, { "id": 777, "amount_net": 100, "amount_vat": 4, "amount_gross": 104, "category": "altro", "vat": { "id": 0, "value": 22, "description": "iva" } }] }, { "id": 12346, "date": "2021-08-19", "number": 6, "numeration": "REC006", "amount_net": 8.2, "amount_vat": 1.8, "amount_gross": 10, "use_gross_prices": true, "type": "sales_receipt", "description": "cassa 1", "rc_center": "", "created_at": "2021-08-19 17:57:56", "updated_at": "2021-08-19 17:57:56", "payment_account": { "id": 555, "name": "contanti" }, "items_list": [{ "id": 888, "amount_net": 8.2, "amount_vat": 1.8, "amount_gross": 10, "category": "altro", "vat": { "id": 0, "value": 22, "description": "iva" } }] }], "first_page_url": "page=1", "from": 1, "last_page": 4, "last_page_url": "page=4", "next_page_url": "page=2", "path": "receipts", "per_page": 50, "prev_page_url": nil, "to": 50, "total": 65 }
    allow(@api_instance).to receive(:list_receipts) { @list_receipts_response_obj }

    @modify_receipt_response_obj = { "data": { "id": 12346, "date": "2021-08-19", "number": 6, "numeration": "REC006", "amount_net": 8.2, "amount_vat": 1.8, "amount_gross": 10, "use_gross_prices": true, "type": "sales_receipt", "description": "cassa 1", "rc_center": "", "created_at": "2021-08-19 17:57:56", "updated_at": "2021-08-19 17:57:56", "payment_account": { "id": 555, "name": "contanti" }, "items_list": [{ "id": 888, "amount_net": 8.2, "amount_vat": 1.8, "amount_gross": 10, "category": "altro", "vat": { "id": 0, "value": 22, "description": "iva" } }] } }
    allow(@api_instance).to receive(:modify_receipt) { @modify_receipt_response_obj }

  end

  after do
    # run after each test
  end

  describe 'test an instance of ReceiptsApi' do
    it 'should create an instance of ReceiptsApi' do
      expect(@api_instance).to be_instance_of(FattureInCloud_Ruby_Sdk::ReceiptsApi)
    end
  end

  # unit tests for create_receipt
  # Create Receipt
  # Creates a new receipt.
  # @param company_id The ID of the company.
  # @param [Hash] opts the optional parameters
  # @option opts [CreateReceiptRequest] :create_receipt_request The Receipt to create.
  # @return [CreateReceiptResponse]
  describe 'create_receipt test' do
    it 'should work' do
      opts = { "data": { "date": "2021-08-19", "number": 6, "numeration": "rreccc", "amount_net": 8.2, "amount_vat": 1.8, "amount_gross": 10, "use_gross_prices": true, "type": "sales_receipt", "description": "cassa 1", "rc_center": "", "payment_account": { "id": 21, "name": "contanti" }, "items_list": [{ "id": 888, "amount_net": 8.2, "amount_vat": 1.8, "amount_gross": 10, "category": "altro", "vat": { "id": 1409, "value": 22, "description": "iva" } }] } }
      response = @api_instance.create_receipt(2, opts)
      response_obj = JSON.parse(response.to_json, object_class: OpenStruct)
      expected_json = @create_receipt_response_obj.to_json
      actual_json = response.to_json

      expect(actual_json).to eq(expected_json)
    end
  end

  # unit tests for delete_receipt
  # Delete Receipt
  # Deletes the specified receipt.
  # @param company_id The ID of the company.
  # @param document_id The ID of the document.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_receipt test' do
    it 'should work' do
      expect(true).to eq(true)
    end
  end

  # unit tests for get_receipt
  # Get Receipt
  # Gets the specified receipt.
  # @param company_id The ID of the company.
  # @param document_id The ID of the document.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :fields List of comma-separated fields.
  # @option opts [String] :fieldset Name of the fieldset.
  # @return [GetReceiptResponse]
  describe 'get_receipt test' do
    it 'should work' do
      response = @api_instance.get_receipt(2, 22)
      response_obj = JSON.parse(response.to_json, object_class: OpenStruct)
      expected_json = @get_receipt_response_obj.to_json
      actual_json = response.to_json

      expect(actual_json).to eq(expected_json)
    end
  end

  # unit tests for get_receipt_pre_create_info
  # Get Receipt Pre-Create Info
  # Retrieves the information useful while creating a new receipt.
  # @param company_id The ID of the company.
  # @param [Hash] opts the optional parameters
  # @return [GetReceiptPreCreateInfoResponse]
  describe 'get_receipt_pre_create_info test' do
    it 'should work' do
      response = @api_instance.get_receipt_pre_create_info(2)
      response_obj = JSON.parse(response.to_json, object_class: OpenStruct)
      expected_json = @get_receipt_pre_create_info_response_obj.to_json
      actual_json = response.to_json

      expect(actual_json).to eq(expected_json)
    end
  end

  # unit tests for get_receipts_monthly_totals
  # Get Receipts Monthly Totals
  # Returns the monthly totals by year and receipt type.
  # @param company_id The ID of the company.
  # @param type Receipt Type
  # @param year Year for which you want monthly totals
  # @param [Hash] opts the optional parameters
  # @return [GetReceiptsMonthlyTotalsResponse]
  describe 'get_receipts_monthly_totals test' do
    it 'should work' do
      response = @api_instance.get_receipts_monthly_totals(2, "sales_receipt", 2021)
      response_obj = JSON.parse(response.to_json, object_class: OpenStruct)
      expected_json = @get_receipts_monthly_totals_response_obj.to_json
      actual_json = response.to_json

      expect(actual_json).to eq(expected_json)
    end
  end

  # unit tests for list_receipts
  # List Receipts
  # Lists the receipts.
  # @param company_id The ID of the company.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :fields List of comma-separated fields.
  # @option opts [String] :fieldset Name of the fieldset.
  # @option opts [Integer] :page The page to retrieve.
  # @option opts [Integer] :per_page The size of the page.
  # @option opts [String] :sort List of comma-separated fields for result sorting (minus for desc sorting).
  # @option opts [String] :query Query for filtering the results.
  # @return [ListReceiptsResponse]
  describe 'list_receipts test' do
    it 'should work' do
      response = @api_instance.list_receipts(2)
      response_obj = JSON.parse(response.to_json, object_class: OpenStruct)
      expected_json = @list_receipts_response_obj.to_json
      actual_json = response.to_json

      expect(actual_json).to eq(expected_json)
    end
  end

  # unit tests for modify_receipt
  # Modify Receipt
  # Modifies the specified receipt.
  # @param company_id The ID of the company.
  # @param document_id The ID of the document.
  # @param [Hash] opts the optional parameters
  # @option opts [ModifyReceiptRequest] :modify_receipt_request Modified receipt.
  # @return [ModifyReceiptResponse]
  describe 'modify_receipt test' do
    it 'should work' do
      opts = { "data": { "date": "2021-08-19", "number": 6, "numeration": "rreccc", "amount_net": 8.2, "amount_vat": 1.8, "amount_gross": 10, "use_gross_prices": true, "type": "sales_receipt", "description": "cassa 1", "rc_center": "", "payment_account": { "id": 21, "name": "contanti" }, "items_list": [{ "id": 888, "amount_net": 8.2, "amount_vat": 1.8, "amount_gross": 10, "category": "altro", "vat": { "id": 1409, "value": 22, "description": "iva" } }] } }
      response = @api_instance.modify_receipt(2, 22, opts)
      response_obj = JSON.parse(response.to_json, object_class: OpenStruct)
      expected_json = @modify_receipt_response_obj.to_json
      actual_json = response.to_json

      expect(actual_json).to eq(expected_json)
    end
  end

end
